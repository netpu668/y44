import logging
import uuid
import datetime
import requests # សម្រាប់ API requests
import io # សម្រាប់ដំណើរការរូបភាព

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, ContextTypes, JobQueue
from telegram.error import TelegramError, BadRequest

# បើកការ Log
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- States សម្រាប់ ConversationHandler ---
ADD_PLATFORM_NAME = 1
ADD_SERVICE_PLATFORM = 2
ADD_SERVICE_NAME = 3
ADD_SERVICE_PRICE = 4
ADD_SMM_SERVICE_ID = 14 

RECEIVE_LINK = 5
RECEIVE_QUANTITY = 6
CONFIRM_ORDER_AND_PAY = 8
RENAME_PLATFORM_OLD_NAME = 10
RENAME_PLATFORM_NEW_NAME = 11
ASK_USER_ID_FOR_DEPOSIT = 12
ASK_AMOUNT_FOR_DEPOSIT = 13
DEPOSIT_AMOUNT = 20
AWAIT_MD5_VERIFICATION = 21 
DELETE_PLATFORM_NAME = 22 
CONFIRM_DELETE_PLATFORM = 23 
CONFIRM_DELETE_ALL_SERVICES = 9 


# --- SMM Panel API Configuration ---
SMM_API_CONFIG = {
    "SMM_API_URL": "https://smeysmm.com/api/v2",
    "SMM_API_KEY": "f18f1c0c27c9eb3907ca64698ecb764f"
}

# --- ទិន្នន័យ (សម្រាប់ Admin Panel) ---
services_data = {
    "Facebook": [
        {"id": "fb_likes", "name": "Facebook Page Likes + Followers", "price_per_k": 5.0, "smm_service_id": 101},
        {"id": "fb_followers", "name": "Facebook Followers", "price_per_k": 10.0, "smm_service_id": 102},
    ],
    "TikTok": [
        {"id": "tt_likes", "name": "TikTok Likes", "price_per_k": 4.0, "smm_service_id": 201},
    ],
    "YouTube": [
        {"id": "yt_views", "name": "YouTube Views", "price_per_k": 6.0, "smm_service_id": 301},
    ],
    "Twitter": [],
    "Telegram": [],
    "Instagram": [],
}

# សម្រាប់ Admin តែប៉ុណ្ណោះ
ADMIN_USER_IDS = [1380299845]

# === [ការកំណត់សំខាន់] ===
TELEGRAM_GROUP_ID = -1002885884014 # Your actual group ID
DEPOSIT_CONFIRMATION_CHAT_ID = 1380299845 # Chat ID ដែល Admin នឹងទទួលបានសារបញ្ជាក់ការដាក់ប្រាក់

# Bakong API Token សម្រាប់ MD5 Check (យកពី qrcode.php)
BAKONG_API_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiOWZiOWE1YTViNTk1NDVhNCJ9LCJpYXQiOjE3NTAyMDk3NDAsImV4cCI6MTc1Nzk4NTc0MH0.mmyjGfKG7dHKhkFMAwwsBO6peIMd5RNR2VlmvVoUJ2k"
# CORRECTED THIS based on your log output: 'chhunlichhean_kun@wing'
TARGET_BAKONG_ACCOUNT_ID = "net_noeurn@trmc"
# ========================


# ទិន្នន័យគណនីអ្នកប្រើប្រាស់ (Bot នេះនឹងបន្តប្រើទិន្នន័យក្នុង memory នេះ)
user_accounts = {
    1380299845: {
        "balance": 100.0,
        "transactions": [],
        "orders": [
            {
                "service_name": "Facebook Page Likes + Followers",
                "quantity": 1000,
                "link": "http://facebook.com/test",
                "cost": 5.0,
                "timestamp": "2025-06-15 10:30:00",
                "smm_order_id": 12345
            }
        ]
    }
}

# --- ប៊ូតុង Menu ຫຼាក់ (Main ReplyKeyboard) ---
BTN_ORDER = "🛒 សេវាកម្ម"
BTN_DEPOSIT = "💰 ដាក់ប្រាក់"
BTN_BALANCE = "💵 ទឹកប្រាក់របស់ខ្ញុំ"
BTN_HISTORY = "📜 ប្រវត្តិបញ្ជាទិញ"
BTN_USER_ID = "🆔 លេខសម្គាល់របស់ខ្ញុំ"
BTN_CONTACT = "👨‍💻 ទាក់ទងអ្នកគ្រប់គ្រង"

# --- ប៊ូតុង Platforms (ReplyKeyboard, shown after BTN_ORDER) ---
BTN_TIKTOK_PLATFORM = "⚫️ Tik Tok"
BTN_YOUTUBE_PLATFORM = "🔴 YouTube"
BTN_FACEBOOK_PLATFORM = "🔵 Facebook"
BTN_TWITTER_PLATFORM = "🟣 Twitter"
BTN_TELEGRAM_PLATFORM = "🟢 Telegram"
BTN_INSTAGRAM_PLATFORM = "🟡 Instagram"

# --- Other Action Buttons (ReplyKeyboard, also shown after BTN_ORDER) ---
BTN_HOW_TO_BUY = "🛍️ របៀបទិញ / How To Buy"
BTN_JOIN_CHANNEL = "➡️ Join Channel"
BTN_ADMIN_CHAT = "🧑‍💻 Admin" # Changed emoji as per provided image

# --- Back Button (ReplyKeyboard) ---
BTN_BACK_TO_MAIN_MENU = "⬅️ ថយក្រោយ"
BTN_BACK_TO_PLATFORMS = "⬅️ ថយក្រោយ" # Reusing for conceptual clarity, maps to 'check_services_from_text' callback

# --- SMM Panel API Client ---
class SMMClient:
    def __init__(self, api_url, api_key):
        self.api_url = api_url
        self.api_key = api_key
        import httpx
        self.client = httpx.AsyncClient(base_url=self.api_url, timeout=30.0)

    async def _make_request(self, action, params=None):
        payload = {"key": self.api_key, "action": action}
        if params:
            payload.update(params)

        try:
            import httpx
            response = await self.client.post("/", data=payload)
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error for SMM API request (action={action}): {e.response.status_code} - {e.response.text}")
            return {"error": f"HTTP Error: {e.response.status_code}"}
        except httpx.RequestError as e:
            logger.error(f"Network error for SMM API request (action={action}): {e}")
            return {"error": f"Network Error: {e}"}
        except Exception as e:
            logger.error(f"Unexpected error for SMM API request (action={action}): {e}")
            return {"error": f"Unexpected Error: {e}"}

    async def add_order(self, smm_service_id, link, quantity):
        logger.info(f"Sending order to SMM panel: service={smm_service_id}, link={link}, quantity={quantity}")
        params = { "service": smm_service_id, "link": link, "quantity": quantity }
        response = await self._make_request("add", params)
        if response and "order" in response:
            logger.info(f"SMM Order successful: Order ID {response['order']}")
            return {"success": True, "order_id": response["order"]}

        error_msg = response.get("error", "Unknown error adding order.")
        logger.error(f"Failed to add order to SMM panel: {error_msg}. Response: {response}")
        return {"success": False, "error": error_msg}

    async def get_balance(self):
        logger.info("Attempting to get balance from SMM panel...")
        response = await self._make_request("balance")
        if response and "balance" in response:
            logger.info(f"SMM balance: {response['balance']} {response.get('currency', 'USD')}")
            return {"success": True, "balance": float(response["balance"]), "currency": response.get("currency", "USD")}

        error_msg = response.get("error", "Unknown error when getting balance.")
        logger.error(f"Failed to get balance from SMM panel: {error_msg}. Response: {response}")
        return {"success": False, "error": error_msg}

smm_client = SMMClient(SMM_API_CONFIG["SMM_API_URL"], SMM_API_CONFIG["SMM_API_KEY"])


# --- មុខងារ Bot សម្រាប់អ្នកប្រើប្រាស់ទូទៅ ---
async def get_main_menu_keyboard():
    """Returns the main ReplyKeyboardMarkup for the start menu."""
    keyboard = [
        [KeyboardButton(BTN_ORDER), KeyboardButton(BTN_DEPOSIT)],
        [KeyboardButton(BTN_BALANCE), KeyboardButton(BTN_HISTORY)],
        [KeyboardButton(BTN_USER_ID), KeyboardButton(BTN_CONTACT)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def get_platform_selection_keyboard():
    """Returns the ReplyKeyboardMarkup for platform selection after 'Order'."""
    platform_buttons = [
        [KeyboardButton(BTN_TIKTOK_PLATFORM), KeyboardButton(BTN_YOUTUBE_PLATFORM), KeyboardButton(BTN_FACEBOOK_PLATFORM)],
        [KeyboardButton(BTN_TWITTER_PLATFORM), KeyboardButton(BTN_TELEGRAM_PLATFORM), KeyboardButton(BTN_INSTAGRAM_PLATFORM)],
        [KeyboardButton(BTN_HOW_TO_BUY)],
        [KeyboardButton(BTN_JOIN_CHANNEL), KeyboardButton(BTN_ADMIN_CHAT)],
        [KeyboardButton(BTN_BACK_TO_MAIN_MENU)] # Back button for platforms
    ]
    return ReplyKeyboardMarkup(platform_buttons, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ផ្ញើសារស្វាគមន៍ พร้อมกับ ReplyKeyboardMarkup ដែលជាប៊ូតុង Menu ຫຼាក់"""
    reply_markup = await get_main_menu_keyboard()
    reply_text = 'សូមស្វាគមន៍មកកាន់ SMM Bot! សូមជ្រើសរើសជម្រើសខាងក្រោម៖'
    
    if update.callback_query:
        await update.callback_query.answer()
        # Edit the message to show the start menu again if it was a callback from an old menu
        try:
            await update.callback_query.message.edit_text(
                text=reply_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except BadRequest: # Message can't be edited if it's too old or deleted
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=reply_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=reply_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    context.user_data.clear()
    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """จัดการเฉพาะ CallbackQuery ที่เหลืออยู่ (เช่น ការជ្រើសរើសសេវាកម្ម, ត្រឡប់)"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith('show_services_'):
        platform_name_with_emoji = query.data.replace('show_services_', '')
        # Extract the clean platform name without emoji
        platform_name = platform_name_with_emoji.split(' ')[-1] if ' ' in platform_name_with_emoji else platform_name_with_emoji
        
        services = services_data.get(platform_name, [])
        if services:
            # Create a list of service buttons, adding the back button at the end
            buttons = [[InlineKeyboardButton(f"🔗 **{s['name']}** ({s['price_per_k']}$/1K)", callback_data=f"buy_service_{platform_name}_{s['id']}")] for s in services if "smm_service_id" in s]
            if not buttons:
                    await query.edit_message_text(text=f"មិនមានសេវាកម្មសម្រាប់ **{platform_name}** ទេ។", parse_mode='Markdown')
                    return
            buttons.append([InlineKeyboardButton(BTN_BACK_TO_PLATFORMS, callback_data='show_platform_menu_from_inline')]) # Back button for inline services
            await query.edit_message_text(text=f"សេវាកម្មសម្រាប់ **{platform_name}**៖", reply_markup=InlineKeyboardMarkup(buttons), parse_mode='Markdown')
        else:
            await query.edit_message_text(text=f"មិនមានសេវាកម្មសម្រាប់ **{platform_name}** ទេ។", parse_mode='Markdown')
    
    elif query.data == 'show_platform_menu_from_inline':
        # This callback is used to return to the platform selection ReplyKeyboard
        await main_menu_handler(update, context, command=BTN_ORDER) # Simulate clicking BTN_ORDER to show platforms
        # We try to delete the old message that had inline keyboard, it might fail if user already deleted it.
        try:
            await query.message.delete()
        except BadRequest:
            pass # Ignore if message not found

    elif query.data == 'start_menu':
        await start(update, context)


async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, command=None):
    """จัดการคำสั่งจาก ReplyKeyboard (ប៊ូតុង Menu ຫຼាក់) ឬប៊ូតុង Platform"""
    # Determine the command: either from the text message or explicitly passed
    effective_command = command if command else update.message.text
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name or "អ្នកប្រើប្រាស់" # Get user's first name, fallback to "User"
    
    # Determine the target message to reply/edit. For ReplyKeyboard interactions, it's usually a new reply.
    # In some cases, we might delete the previous message.
    target_message = update.message # For direct text messages from ReplyKeyboard

    if effective_command == BTN_ORDER:
        # Dynamic greeting using user's first name
        message_text = f"សួស្ដី! {user_first_name} 👋\nសូមជ្រើសរើស platform ដែលអ្នកចង់ទិញ"
        reply_markup_platforms = await get_platform_selection_keyboard()
        
        # Always send a new message when displaying a new ReplyKeyboardMarkup
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message_text,
            reply_markup=reply_markup_platforms,
            parse_mode='Markdown'
        )

    # Handle clicks on the new platform buttons (now they are MessageHandlers)
    elif effective_command in [BTN_TIKTOK_PLATFORM, BTN_YOUTUBE_PLATFORM, BTN_FACEBOOK_PLATFORM, 
                               BTN_TWITTER_PLATFORM, BTN_TELEGRAM_PLATFORM, BTN_INSTAGRAM_PLATFORM]:
        
        # When a platform button from the ReplyKeyboard is clicked, send a message
        # with an Inline Keyboard button that then triggers the service display.
        platform_name = effective_command # Keep emoji for button text, but strip for data retrieval later
        
        # We need to send an inline keyboard to choose services.
        # The inline keyboard will have a single button that, when clicked,
        # will show the actual list of services.
        keyboard = [
            [InlineKeyboardButton(f"មើលសេវាកម្មសម្រាប់ {platform_name}", callback_data=f"show_services_{platform_name}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send this inline keyboard, ideally by editing the previous message if possible,
        # or sending a new one if not. For ReplyKeyboards, it's usually a new message.
        await update.message.reply_text(
            f"អ្នកបានជ្រើសរើស **{platform_name}** ។\n\nសូមចុចប៊ូតុងខាងក្រោមដើម្បីមើលសេវាកម្ម:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


    elif effective_command == BTN_BALANCE:
        balance = user_accounts.get(user_id, {}).get("balance", 0)
        await target_message.reply_text(text=f"💰 ទឹកប្រាក់ក្នុង Account៖ **{balance:.2f}$ USD**", parse_mode='Markdown')

    elif effective_command == BTN_CONTACT:
        await target_message.reply_text(text="👨‍💻 សូមទំនាក់ទំនងអ្នកគ្រប់គ្រង៖ **@punetDigital168**", parse_mode='Markdown')

    elif effective_command == BTN_USER_ID:
        await target_message.reply_text(text=f"🔑 User ID: `{user_id}`", parse_mode='Markdown')
    
    elif effective_command == BTN_DEPOSIT:
        await start_deposit(update, context) # Call the deposit handler
    
    elif effective_command == BTN_HISTORY:
        await show_order_history(update, context)
        
    elif effective_command == BTN_HOW_TO_BUY:
        await target_message.reply_text(text="ℹ️ **របៀបទិញសេវាកម្ម៖**\n\n1. ចុចលើ Platform ដែលអ្នកចង់ទិញ។\n2. ជ្រើសរើសសេវាកម្មដែលអ្នកចង់បាន។\n3. បញ្ចូល Link និងចំនួនដែលអ្នកចង់ទិញ។\n4. បញ្ជាក់ការបញ្ជាទិញ និងរង់ចាំការដំណើរការ។", parse_mode='Markdown')

    elif effective_command == BTN_JOIN_CHANNEL:
        await target_message.reply_text(text="➡️ **សូមចូលរួម Channel របស់យើងខ្ញុំដើម្បីទទួលបានព័ត៌មានថ្មីៗ:**\n\n[Link ទៅកាន់ Channel របស់អ្នក](https://t.me/your_channel_link)", parse_mode='Markdown') # Replace with your actual channel link

    elif effective_command == BTN_ADMIN_CHAT:
        await target_message.reply_text(text="🧑‍💻 **សម្រាប់ទំនាក់ទំនង Admin:** @PHENNG", parse_mode='Markdown') # As seen in the image
    
    elif effective_command == BTN_BACK_TO_MAIN_MENU:
        await start(update, context) # Go back to the main start menu keyboard


# --- មុខងារដាក់ប្រាក់ថ្មី ---
async def generate_khqr_code(amount: float):
    """ហៅទៅ API ដើម្បីបង្កើត QR Code Bakong KHQR"""
    api_url = f"https://api.kunchhunlichhean.org/khqr/create?amount={amount}&bakongid=net_noeurn@trmc&merchantname=CHHEANSMM"
    try:
        # Make the GET request to the API
        response = requests.get(api_url)
        response.raise_for_status() # Will raise HTTPError for bad responses (4xx or 5xx)
        response_data = response.json()

        qr_code_url = response_data.get('qr')
        md5 = response_data.get('md5')

        if qr_code_url and md5:
            return {
                'qr_url': qr_code_url,
                'md5': md5,
                'amount': amount
            }, None
        else:
            return None, f"Failed to generate QR code: Missing QR code URL or MD5 in response. Response: {response_data}"
    except requests.exceptions.RequestException as e:
        logger.error(f"Error calling KHQR API: {e}")
        return None, f"Failed to connect to QR generation service: {e}"
    except Exception as e:
        logger.error(f"Unexpected error in generate_khqr_code: {e}")
        return None, f"An unexpected error occurred during QR generation: {e}"

async def check_bakong_md5_api(md5: str) -> bool:
    """ពិនិត្យស្ថានភាពប្រតិបត្តិការដោយប្រើ MD5 API របស់ Bakong"""
    url = 'https://api-bakong.nbc.gov.kh/v1/check_transaction_by_md5'
    headers = {
        'Authorization': f'Bearer {BAKONG_API_TOKEN}',
        'Content-Type': 'application/json',
    }
    data = {
        'md5': md5
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        response_data = response.json()

        logger.info(f"Bakong API response for MD5 {md5}: {response_data}") # Added for debugging

        # Check if responseCode is 0 (success) and toAccountId matches
        if response_data.get('responseCode') == 0 and response_data.get('data', {}).get('toAccountId') == TARGET_BAKONG_ACCOUNT_ID:
            logger.info(f"MD5 {md5} check successful. Transaction confirmed to {TARGET_BAKONG_ACCOUNT_ID}.")
            return True
        else:
            logger.info(f"MD5 {md5} check returned non-success or mismatched account. Expected '{TARGET_BAKONG_ACCOUNT_ID}', Got '{response_data.get('data', {}).get('toAccountId') if response_data.get('data') else 'N/A'}'. Full response: {response_data}")
            return False
    except requests.exceptions.RequestException as e:
        logger.error(f"Error checking Bakong MD5 API for {md5}: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error in check_bakong_md5_api for {md5}: {e}")
        return False

async def start_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ចាប់ផ្តើមដំណើរការដាក់ប្រាក់"""
    await update.message.reply_text(
        text="💵 **សូមបញ្ចូលចំនួនទឹកប្រាក់ដែលអ្នកចង់ដាក់ (USD):**\n\nឧទាហរណ៍: `10` ឬ `25.5`\n\nវាយ /cancel ដើម្បីបោះបង់។",
        parse_mode='Markdown'
    )
    return DEPOSIT_AMOUNT

async def receive_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ទទួលចំនួនទឹកប្រាក់ រួចបង្កើត QR និងចាប់ផ្តើមពិនិត្យ MD5"""
    try:
        amount = float(update.message.text)
        if amount <= 0:
            raise ValueError("Amount must be positive.")
    except (ValueError, TypeError):
        await update.message.reply_text(
            "❌ ចំនួនទឹកប្រាក់មិនត្រឹមត្រូវទេ។ សូមព្យាយាមម្តងទៀត (ឧ. `10`) ឬវាយ /cancel ដើម្បីបោះបង់។",
            parse_mode='Markdown'
        )
        return DEPOSIT_AMOUNT

    user = update.effective_user
    transaction_code = str(uuid.uuid4().hex)[:8].upper()
    
    # បង្ហាញសាររង់ចាំ
    message_to_delete = await update.message.reply_text("🔄 កំពុងបង្កើត QR Code... សូមរង់ចាំ។")

    qr_info, error = await generate_khqr_code(amount)

    if error:
        try:
            await message_to_delete.edit_text(f"❌ មិនអាចបង្កើត QR Code បានទេ៖ `{error}`\nសូមព្យាយាមម្តងទៀតនៅពេលក្រោយ។", parse_mode='Markdown')
        except BadRequest: # If message was already deleted or too old
            await update.message.reply_text(f"❌ មិនអាចបង្កើត QR Code បានទេ៖ `{error}`\nសូមព្យាមម្តងទៀតនៅពេលក្រោយ។", parse_mode='Markdown')
        return ConversationHandler.END

    qr_code_url = qr_info['qr_url']
    md5 = qr_info['md5']
    
    # រក្សាទុកព័ត៌មានដាក់ប្រាក់បណ្តោះអាសន្ន
    context.bot_data['pending_deposits'][transaction_code] = {
        'user_id': user.id,
        'username': user.username,
        'full_name': user.full_name,
        'amount': amount,
        'md5': md5,
        'timestamp': datetime.datetime.now().isoformat(),
        'chat_id': update.effective_chat.id, # ដើម្បីអាចផ្ញើសារត្រឡប់ទៅ user វិញ
        'admin_msg_id': None # នឹងត្រូវបានបំពេញបន្ទាប់ពីផ្ញើសារទៅ Admin
    }

    # User message with QR Code
    caption_text = (
        f"**💰 ព័ត៌មានសម្រាប់ការដាក់ប្រាក់** 💰\n\n"
        f"**ចំនួនទឹកប្រាក់ដែលត្រូវដាក់:** `${amount:.2f} USD`\n"
        f"សូមស្កេន QR Code ខាងក្រោមដើម្បីបង់ប្រាក់។\n"
        f"យើងកំពុងរង់ចាំការទូទាត់របស់អ្នក។ ប្រព័ន្ធនឹងបញ្ចូលប្រាក់ដោយស្វ័យប្រវត្តិ។"
    )

    try:
        # ទាញយករូបភាព QR Code ពី URL
        qr_image_response = requests.get(qr_code_url)
        qr_image_response.raise_for_status()
        qr_image_bytes = io.BytesIO(qr_image_response.content)

        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=qr_image_bytes,
            caption=caption_text,
            parse_mode='Markdown'
        )
        try:
            await message_to_delete.delete() # លុបសាររង់ចាំ
        except BadRequest: # Message might already be gone
            pass
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching QR image from {qr_code_url}: {e}")
        await update.message.reply_text(
            f"❌ មិនអាចបង្ហាញ QR Code បានទេ។ បញ្ហា៖ `{e}`\n"
            f"សូមបង់ប្រាក់ដោយផ្ទាល់ទៅគណនី Bakong ID: `{TARGET_BAKONG_ACCOUNT_ID}` ចំនួន `${amount:.2f} USD` ហើយប្រើ `{md5}` ជា Reference។\n"
            f"កូដប្រតិបត្តិការរបស់អ្នកគឺ `{transaction_code}`។",
            parse_mode='Markdown' 
        )
    except Exception as e:
        logger.error(f"Unexpected error sending QR photo: {e}")
        await update.message.reply_text(
            f"❌ មានបញ្ហាក្នុងការបង្ហាញ QR Code។\n"
            f"សូមបង់ប្រាក់ដោយផ្ទាល់ទៅគណណី Bakong ID: `{TARGET_BAKONG_ACCOUNT_ID}` ចំនួន `${amount:.2f} USD` ហើយប្រើ `{md5}` ជា Reference។\n"
            f"កូដប្រតិបត្តិការរបស់អ្នកគឺ `{transaction_code}`។",
            parse_mode='Markdown' 
        )
    
    # Admin message with confirmation buttons - Using HTML parse_mode for robustness
    admin_message_text = (
        f"🔔 <b>សំណើដាក់ប្រាក់ថ្មី (Auto-Check)</b> 🔔\n\n"
        f"<b>ពី:</b> {user.full_name} (@{user.username if user.username else 'N/A'}, ID: <code>{user.id}</code>)\n"
        f"<b>ចំនួន:</b> <code>${amount:.2f} USD</code>\n"
        f"<b>Transaction Code:</b> <code>{transaction_code}</code>\n"
        f"<b>MD5:</b> <code>{md5}</code>\n\n"
        f"ប្រព័ន្ធកំពុងពិនិត្យដោយស្វ័យប្រវត្តិ។ អ្នកក៏អាចចុចប៊ូតុងខាងក្រោមដើម្បីអនុម័ត/បដិសេធដោយដៃ។"
    )
    keyboard = [
        [
            InlineKeyboardButton("👍 យល់ព្រម (ដោយដៃ)", callback_data=f'deposit_approve_{transaction_code}'),
            InlineKeyboardButton("👎 បដិសេធ (ដោយដៃ)", callback_data=f'deposit_reject_{transaction_code}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        admin_msg = await context.bot.send_message(
            chat_id=DEPOSIT_CONFIRMATION_CHAT_ID,
            text=admin_message_text,
            reply_markup=reply_markup,
            parse_mode='HTML' # <--- Changed to HTML for admin messages
        )
        context.bot_data['pending_deposits'][transaction_code]['admin_msg_id'] = admin_msg.message_id
    except TelegramError as e: # Catch specific Telegram errors
        logger.error(f"Could not send deposit confirmation to admin chat {DEPOSIT_CONFIRMATION_CHAT_ID}. Error: {e}")
        if ADMIN_USER_IDS:
            try:
                # Send a more detailed error message to an admin if possible
                await context.bot.send_message(
                    chat_id=ADMIN_USER_IDS[0],
                    text=f"⚠️ <b>CRITICAL ERROR:</b> Failed to send deposit request <code>{transaction_code}</code> to admin chat <code>{DEPOSIT_CONFIRMATION_CHAT_ID}</code>. Error: <code>{e}</code>\n"
                         f"Please ensure the <code>DEPOSIT_CONFIRMATION_CHAT_ID</code> is correct and the bot is an admin in that group/chat.",
                    parse_mode='HTML'
                )
            except Exception as e_admin:
                logger.error(f"FATAL: Could not even send error message to main admin {ADMIN_USER_IDS[0]}. Error: {e_admin}")

    # បន្ថែម Job ទៅ JobQueue ដើម្បីពិនិត្យ MD5 
    context.job_queue.run_repeating(
        check_payment_job,
        interval=10, # ពិនិត្យរៀងរាល់ 10 វិនាទី
        first=10,    # ចាប់ផ្តើមពិនិត្យបន្ទាប់ពី 10 វិនាទី
        data={'transaction_code': transaction_code},
        name=f"md5_check_{transaction_code}"
    )

    # កំណត់ពេលសម្រាប់លុប Job ចេញ ប្រសិនបើលើសពេល (e.g., 5 minutes timeout)
    context.job_queue.run_once(
        remove_deposit_job_if_timeout,
        when=datetime.timedelta(minutes=5), # Change to 5 minutes, 3 was too short
        data={'transaction_code': transaction_code},
        name=f"timeout_job_{transaction_code}"
    )

    return ConversationHandler.END


async def check_payment_job(context: ContextTypes.DEFAULT_TYPE):
    """Job function ដើម្បីពិនិត្យ MD5 ជាប្រចាំ"""
    transaction_code = context.job.data['transaction_code']
    
    pending_deposit = context.bot_data.get('pending_deposits', {}).get(transaction_code)

    if not pending_deposit:
        logger.info(f"Job for {transaction_code} found no pending deposit. Removing job.")
        context.job.schedule_removal()
        return

    md5 = pending_deposit['md5']
    user_id = pending_deposit['user_id']
    amount = pending_deposit['amount']
    chat_id = pending_deposit['chat_id']
    admin_msg_id = pending_deposit['admin_msg_id']
    full_name = pending_deposit['full_name']

    payment_confirmed = await check_bakong_md5_api(md5)

    if payment_confirmed:
        if user_id not in user_accounts:
            user_accounts[user_id] = {"balance": 0.0, "transactions": [], "orders": []}
        user_accounts[user_id]["balance"] += amount
        user_accounts[user_id]["transactions"].append(f"+{amount:.2f}$ (Auto Deposit {transaction_code})")
        new_balance = user_accounts[user_id]['balance']

        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"✅ **ការដាក់ប្រាក់ដោយស្វ័យប្រវត្តិបានជោគជ័យ!**\n\n"
                     f"ទឹកប្រាក់ចំនួន **${amount:.2f}** ត្រូវបានបញ្ចូលទៅក្នុងគណនីរបស់អ្នក។\n"
                     f"ទឹកប្រាក់នៅសល់: **${new_balance:.2f}**",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            logger.warning(f"Failed to notify user {user_id} about auto-approved deposit {transaction_code}. Error: {e}")

        # Update Admin message
        try:
            final_admin_text = (
                f"✅ <b>បានយល់ព្រមដោយស្វ័យប្រវត្តិ</b>\n\n"
                f"<b>អ្នកប្រើប្រាស់:</b> {full_name} (ID: <code>{user_id}</code>)\n"
                f"<b>ចំនួន:</b> <code>${amount:.2f} USD</code>\n"
                f"<b>Transaction Code:</b> <code>{transaction_code}</code>\n\n"
                f"ទឹកប្រាក់ត្រូវបានបញ្ចូលទៅក្នុងគណនីអ្នកប្រើប្រាស់រួចរាល់ហើយ។"
            )
            if admin_msg_id:
                await context.bot.edit_message_text(
                    chat_id=DEPOSIT_CONFIRMATION_CHAT_ID,
                    message_id=admin_msg_id,
                    text=final_admin_text,
                    parse_mode='HTML', # <--- Changed to HTML
                    reply_markup=None # លុបប៊ូតុងចេញ
                )
            else:
                await context.bot.send_message(
                    chat_id=DEPOSIT_CONFIRMATION_CHAT_ID,
                    text=final_admin_text,
                    parse_mode='HTML' # <--- Changed to HTML
                )
        except TelegramError as e:
            logger.error(f"Failed to update/send admin message for auto-approved deposit {transaction_code}: {e}")

        # Remove the deposit from pending list and scheduled jobs
        if transaction_code in context.bot_data['pending_deposits']:
            del context.bot_data['pending_deposits'][transaction_code]
        for job in context.job_queue.get_jobs_by_name(f"timeout_job_{transaction_code}"):
            job.schedule_removal() # លុប timeout job ផង
        context.job.schedule_removal() # លុប job បច្ចុប្បន្នចេញ

    else:
        logger.info(f"Payment for {transaction_code} still pending.")

async def remove_deposit_job_if_timeout(context: ContextTypes.DEFAULT_TYPE):
    """Job function ដើម្បីដក pending deposit ចេញ ប្រសិនបើអស់ពេល"""
    transaction_code = context.job.data['transaction_code']
    
    pending_deposit = context.bot_data.get('pending_deposits', {}).get(transaction_code)

    if pending_deposit:
        user_id = pending_deposit['user_id']
        amount = pending_deposit['amount']
        chat_id = pending_deposit['chat_id']
        admin_msg_id = pending_deposit['admin_msg_id']
        full_name = pending_deposit['full_name']

        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"❌ **ការដាក់ប្រាក់បានអស់ពេលហើយ!**\n\n"
                     f"សំណើដាក់ប្រាក់ចំនួន **${amount:.2f}** (Code: `{transaction_code}`) របស់អ្នកត្រូវបានបដិសេធដោយសារអស់ពេល។\n\n"
                     f"សូមទាក់ទងអ្នកគ្រប់គ្រងសម្រាប់ព័ត៌មានបន្ថែម ឬចាប់ផ្តើមការដាក់ប្រាក់ថ្មី។",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            logger.warning(f"Failed to notify user {user_id} about timed-out deposit {transaction_code}. Error: {e}")

        # Update Admin message
        try:
            final_admin_text = (
                f"❌ <b>បានបដិសេធដោយស្វ័យប្រវត្តិ (អស់ពេល)</b>\n\n"
                f"<b>អ្នកប្រើប្រាស់:</b> {full_name} (ID: <code>{user_id}</code>)\n"
                f"<b>ចំនួន:</b> <code>${amount:.2f} USD</code>\n"
                f"<b>Transaction Code:</b> <code>{transaction_code}</code>\n\n"
                f"សំណើនេះត្រូវបានលុបចោលដោយសារអស់ពេល។"
            )
            if admin_msg_id:
                await context.bot.edit_message_text(
                    chat_id=DEPOSIT_CONFIRMATION_CHAT_ID,
                    message_id=admin_msg_id,
                    text=final_admin_text,
                    parse_mode='HTML', # <--- Changed to HTML
                    reply_markup=None # លុបប៊ូតុងចេញ
                )
            else:
                await context.bot.send_message(
                    chat_id=DEPOSIT_CONFIRMATION_CHAT_ID,
                    text=final_admin_text,
                    parse_mode='HTML' # <--- Changed to HTML
                )
        except TelegramError as e:
            logger.error(f"Failed to update/send admin message for timed-out deposit {transaction_code}: {e}")

        # Remove the repeating job too
        for job in context.job_queue.get_jobs_by_name(f"md5_check_{transaction_code}"):
            job.schedule_removal()

        del context.bot_data['pending_deposits'][transaction_code]
    else:
        logger.info(f"Timeout job for {transaction_code} found no pending deposit. Likely handled manually.")

async def handle_deposit_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """មុខងារសម្រាប់ Admin ក្នុងការអនុម័ត/បដិសេធការដាក់ប្រាក់ដោយដៃ"""
    query = update.callback_query
    await query.answer()
    admin_user = query.from_user

    if admin_user.id not in ADMIN_USER_IDS:
        await query.answer("⛔️ អ្នកមិនមែនជា Admin ទេ។", show_alert=True)
        return

    action, code = query.data.split('_', 2)[1:]

    pending_deposits = context.bot_data.get('pending_deposits', {})
    deposit_info = pending_deposits.get(code)

    if not deposit_info:
        try:
            await query.edit_message_text(
                text=f"⚠️ <b>ប្រតិបត្តិការបានដំណើរការរួចហើយ</b>\n\n"
                     f"សំណើសម្រាប់កូដ <code>{code}</code> នេះត្រូវបានយល់ព្រម ឬបដិសេធរួចហើយ។",
                parse_mode='HTML' # <--- Changed to HTML
            )
        except BadRequest: # Message might be too old or deleted
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"⚠️ <b>ប្រតិបត្តិការបានដំណើរការរួចហើយ</b>\n\n"
                     f"សំណើសម្រាប់កូដ <code>{code}</code> នេះត្រូវបានយល់ព្រម ឬបដិសេធរួចហើយ។",
                parse_mode='HTML'
            )
        return

    target_user_id = deposit_info['user_id']
    amount = deposit_info['amount']
    full_name = deposit_info['full_name']
    chat_id = deposit_info['chat_id'] # Chat ID របស់ user ដើម
    md5_hash = deposit_info['md5']

    if action == 'approve':
        if target_user_id not in user_accounts:
            user_accounts[target_user_id] = {"balance": 0.0, "transactions": [], "orders": []}
        user_accounts[target_user_id]["balance"] += amount
        user_accounts[target_user_id]["transactions"].append(f"+{amount:.2f}$ (Admin Deposit {code})")
        new_balance = user_accounts[target_user_id]['balance']

        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"✅ **ការដាក់ប្រាក់បានជោគជ័យ!**\n\n"
                     f"ទឹកប្រាក់ចំនួន **${amount:.2f}** ត្រូវបានបញ្ចូលទៅក្នុងគណនីរបស់អ្នកដោយអ្នកគ្រប់គ្រង។\n"
                     f"ទឹកប្រាក់នៅសល់: **${new_balance:.2f}**",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            logger.warning(f"Failed to notify user {target_user_id} about manual deposit {code}. Error: {e}")
            await query.answer(f"User {target_user_id} might have blocked the bot. Could not notify.", show_alert=True)

        final_admin_text = (
            f"✅ <b>បានយល់ព្រម (ដោយ {admin_user.full_name})</b>\n\n"
            f"<b>អ្នកប្រើប្រាស់:</b> {full_name} (ID: <code>{target_user_id}</code>)\n"
            f"<b>ចំនួន:</b> <code>${amount:.2f} USD</code>\n"
            f"<b>Transaction Code:</b> <code>{code}</code>\n"
            f"<b>MD5:</b> <code>{md5_hash}</code>\n\n"
            f"ទឹកប្រាក់ត្រូវបានបញ្ចូលទៅក្នុងគណនីអ្នកប្រើប្រាស់រួចរាល់ហើយ។"
        )
        try:
            await query.edit_message_text(text=final_admin_text, parse_mode='HTML', reply_markup=None) # <--- Changed to HTML
        except BadRequest:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=final_admin_text, parse_mode='HTML', reply_markup=None
            )

    elif action == 'reject':
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"❌ **ការដាក់ប្រាក់ត្រូវបានបដិសេធ**\n\n"
                     f"សំណើដាក់ប្រាក់ចំនួន **${amount:.2f}** (Code: `{code}`) របស់អ្នកត្រូវបានបដិសេធដោយអ្នកគ្រប់គ្រង។\n\n"
                     f"សូមទាក់ទងអ្នកគ្រប់គ្រងសម្រាប់ព័ត៌មានបន្ថែម។",
                parse_mode='Markdown'
            )
        except TelegramError as e:
            logger.warning(f"Failed to notify user {target_user_id} about rejected deposit {code}. Error: {e}")
            await query.answer(f"User {target_user_id} might have blocked the bot. Could not notify.", show_alert=True)
            
        final_admin_text = (
            f"❌ <b>បានបដិសេធ (ដោយ {admin_user.full_name})</b>\n\n"
            f"<b>អ្នកប្រើប្រាស់:</b> {full_name} (ID: <code>{target_user_id}</code>)\n"
            f"<b>ចំនួន:</b> <code>${amount:.2f} USD</code>\n"
            f"<b>Transaction Code:</b> <code>{code}</code>\n"
            f"<b>MD5:</b> <code>{md5_hash}</code>"
        )
        try:
            await query.edit_message_text(text=final_admin_text, parse_mode='HTML', reply_markup=None) # <--- Changed to HTML
        except BadRequest:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=final_admin_text, parse_mode='HTML', reply_markup=None
            )

    # លុប pending deposit និង jobs ដែលពាក់ព័ន្ធ
    if code in context.bot_data['pending_deposits']:
        del context.bot_data['pending_deposits'][code]
        for job in context.job_queue.get_jobs_by_name(f"md5_check_{code}"):
            job.schedule_removal()
        for job in context.job_queue.get_jobs_by_name(f"timeout_job_{code}"):
            job.schedule_removal()

    return ConversationHandler.END

async def cancel_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancels a deposit conversation flow."""
    message = "❌ ការដាក់ប្រាក់ត្រូវបានបោះបង់។"
    if update.callback_query:
        if update.callback_query.message:
            try:
                await update.callback_query.message.edit_text(text=message, parse_mode='Markdown')
            except BadRequest:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
        else:
            await update.callback_query.answer()
            await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    elif update.message:
        await update.message.reply_text(text=message, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
    
    # After canceling deposit, return to the main menu keyboard
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="សូមជ្រើសរើសជម្រើសខាងក្រោម៖",
        reply_markup=await get_main_menu_keyboard(),
        parse_mode='Markdown'
    )
    context.user_data.clear()
    return ConversationHandler.END


# --- មុខងារបង្ហាញប្រវត្តិបញ្ជាទិញ ---
async def show_order_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """បង្ហាញប្រវត្តិការបញ្ជាទិញ (ถูกเรียกពី MessageHandler)"""
    user_id = update.effective_user.id

    user_data = user_accounts.get(user_id)
    back_button_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(BTN_BACK_TO_MAIN_MENU, callback_data='start_menu')]])

    if not user_data or not user_data.get("orders"):
        await update.message.reply_text(
            text="❌ អ្នកមិនទាន់មានប្រវត្តិបញ្ជាទិញនៅឡើយទេ។",
            reply_markup=back_button_keyboard,
            parse_mode='Markdown'
        )
        return

    orders = user_data["orders"]
    recent_orders = list(reversed(orders))[:10]

    history_text = "📜 **ប្រវត្តិបញ្ជាទិញ (10 ចុងក្រោយ)** 📜\n"
    history_text += "----------------------------------\n\n"
    for order in recent_orders:
        remaining_balance_val = order.get('remaining_balance')
        remaining_balance_str = f"**{remaining_balance_val:.2f}$**" if remaining_balance_val is not None else "**N/A**"

        history_text += (
            f"▪️ សេវាកម្ម៖ **{order.get('service_name', 'N/A')}**\n"
            f"▪️ Order ID: `{order.get('smm_order_id', 'N/A')}`\n"
            f"▪️ Link៖ `{order.get('link', 'N/A')}`\n"
            f"▪️ ទឹកប្រាក់កាត់ចំនួន: **{order.get('cost', 0):.2f}$**\n"
            f"▪️ ទឹកប្រាក់នៅសល់៖ {remaining_balance_str}\n"
            f"▪️ ថ្ងៃ ខែ ឆ្នាំ៖ `{order.get('timestamp', 'N/A')}`\n"
            f"----------------------------------\n"
        )

    await update.message.reply_text(
        text=history_text,
        reply_markup=back_button_keyboard,
        parse_mode='Markdown'
    )


# --- មុខងារ User Order Flow (ConversationHandler) ---
async def select_service_to_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split('_')
    platform_name = parts[2]
    service_id = parts[3]

    selected_service = next((s for s in services_data.get(platform_name, []) if s['id'] == service_id), None)

    if not selected_service or "smm_service_id" not in selected_service:
        await query.edit_message_text("❌ សេវាកម្មនេះមិនមានទៀតទេ។")
        return ConversationHandler.END

    context.user_data['order_platform'] = platform_name
    context.user_data['order_service'] = selected_service

    try:
        await query.edit_message_text(
            f"អ្នកបានជ្រើសរើស៖\n**{selected_service['name']}**\nតម្លៃ៖ **{selected_service['price_per_k']}$ / 1000**\n\n"
            f"សូមវាយបញ្ចូលចំនួនដែលអ្នកចង់ទិញ៖ (ឧ. `1000`)\n\nវាយ /cancel ដើម្បីបោះបង់។",
            parse_mode='Markdown'
        )
    except BadRequest: # If message was already deleted or too old
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"អ្នកបានជ្រើសរើស៖\n**{selected_service['name']}**\nតម្លៃ៖ **{selected_service['price_per_k']}$ / 1000**\n\n"
                 f"សូមវាយបញ្ចូលចំនួនដែលអ្នកចង់ទិញ៖ (ឧ. `1000`)\n\nវាយ /cancel ដើម្បីបោះបង់។",
            parse_mode='Markdown'
        )

    return RECEIVE_QUANTITY

async def receive_quantity_then_ask_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        quantity = int(update.message.text.strip())
        if quantity <= 0: raise ValueError()
    except ValueError:
        await update.message.reply_text("ចំនួនមិនត្រឹមត្រូវទេ។ សូមវាយបញ្ចូលជាលេខវិជ្ជមាន (ឧ. `1000`) ឬ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
        return RECEIVE_QUANTITY

    context.user_data['order_quantity'] = quantity

    await update.message.reply_text(
        "សូមផ្ញើ **Link** សម្រាប់សេវាកម្មនេះ៖\n\nវាយ /cancel ដើម្បីបោះបង់។",
        parse_mode='Markdown'
    )
    return RECEIVE_LINK

async def receive_link_and_confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    platform_link = update.message.text.strip()
    if not platform_link.startswith(('http://', 'https://')):
        await update.message.reply_text("Link មិនត្រឹមត្រូវ។ សូមផ្ញើ Link ត្រឹមត្រូវ (ឧ. `https://example.com/post`) ឬ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
        return RECEIVE_LINK # Keep user in this state until valid link is provided

    context.user_data['order_link'] = platform_link

    user_id = update.effective_user.id
    selected_service = context.user_data['order_service']
    quantity = context.user_data['order_quantity']
    price_per_k = selected_service['price_per_k']
    total_cost = (quantity / 1000) * price_per_k

    user_balance = user_accounts.get(user_id, {}).get("balance", 0)

    context.user_data['order_cost'] = total_cost

    if user_balance < total_cost:
        await update.message.reply_text(
            f"❌ **ទឹកប្រាក់មិនគ្រប់គ្រាន់!**\n\n"
            f"ទឹកប្រាក់បច្ចុប្បន្ន: **{user_balance:.2f}$**\n"
            f"តម្លៃសេវាកម្ម: **{total_cost:.2f}$**\n\n"
            f"សូមដាក់ប្រាក់បន្ថែមដើម្បីបន្ត។",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    message_text = (
        f"**សូមបញ្ជាក់ការបញ្ជាទិញរបស់អ្នក**\n\n"
        f"▪️ សេវាកម្ម៖ **{selected_service['name']}**\n"
        f"▪️ ចំនួន៖ **{quantity}**\n"
        f"▪️ Link៖ `{platform_link}`\n"
        f"----------------------------------\n"
        f"▪️ តម្លៃសរុប៖ **{total_cost:.2f}$ USD**\n"
        f"▪️ ទឹកប្រាក់បច្ចុប្បន្ន៖ **{user_balance:.2f}$ USD**\n"
        f"▪️ ទឹកប្រាក់នៅសល់ (ក្រោយទិញ)៖ **{(user_balance - total_cost):.2f}$ USD**\n\n"
        f"តើអ្នកពិតជាចង់បញ្ជាទិញមែនទេ?"
    )

    keyboard = [
        [InlineKeyboardButton("🛒 បញ្ជាទិញឥឡូវនេះ", callback_data='confirm_order')],
        [InlineKeyboardButton("❌ បោះបង់", callback_data='cancel_order')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

    return CONFIRM_ORDER_AND_PAY

async def process_and_deduct_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'cancel_order':
        await query.edit_message_text("❌ ការបញ្ជាទិញត្រូវបានបោះបង់។", parse_mode='Markdown')
        context.user_data.clear()
        return ConversationHandler.END

    try:
        await query.edit_message_text("🔄 កំពុងដំណើរការបញ្ជាទិញ... សូមរង់ចាំ។", parse_mode='Markdown')
    except BadRequest:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="🔄 កំពុងដំណើរការបញ្ជាទិញ... សូមរង់ចាំ។", parse_mode='Markdown'
        )

    user_id = update.effective_user.id
    cost = context.user_data.get('order_cost')
    selected_service = context.user_data.get('order_service', {})
    smm_service_id = selected_service.get('smm_service_id')
    link = context.user_data.get('order_link')
    quantity = context.user_data.get('order_quantity')

    user_balance = user_accounts.get(user_id, {}).get("balance", 0)
    if user_balance < cost or not all([cost, smm_service_id, link, quantity]):
        try:
            await query.edit_message_text("❌ មានបញ្ហា។ ទឹកប្រាក់មិនគ្រប់គ្រាន់ ឬទិន្នន័យបញ្ជាទិញបាត់បង់។", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="❌ មានបញ្ហា។ ទឹកប្រាក់មិនគ្រប់គ្រាន់ ឬទិន្នន័យបញ្ជាទិញបាត់បង់។", parse_mode='Markdown'
            )
        context.user_data.clear()
        return ConversationHandler.END

    user_accounts[user_id]["balance"] -= cost
    remaining_balance = user_accounts[user_id]['balance']

    smm_response = await smm_client.add_order(smm_service_id, link, quantity)

    if smm_response.get("success"):
        smm_order_id = smm_response['order_id']

        order_timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') # Use current time for timestamp
        order_details = {
            "service_name": selected_service['name'],
            "quantity": quantity,
            "link": link,
            "cost": cost,
            "timestamp": order_timestamp,
            "smm_order_id": smm_order_id,
            "remaining_balance": remaining_balance
        }

        if 'orders' not in user_accounts[user_id]:
            user_accounts[user_id]['orders'] = []
        user_accounts[user_id]["orders"].append(order_details)
        user_accounts[user_id]["transactions"].append(f"-{cost:.2f}$ (Order {smm_order_id})")

        try:
            await query.edit_message_text(
                f"✅ **ការបញ្ជាទិញបានជោគជ័យ!**\n\n"
                f"SMM Order ID: `{smm_order_id}`\n"
                f"ទឹកប្រាក់ត្រូវបានកាត់: **{cost:.2f}$**\n"
                f"ទឹកប្រាក់នៅសល់៖ **{remaining_balance:.2f}$**",
                parse_mode='Markdown'
            )
        except BadRequest:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"✅ **ការបញ្ជាទិញបានជោគជ័យ!**\n\n"
                     f"SMM Order ID: `{smm_order_id}`\n"
                     f"ទឹកប្រាក់ត្រូវបានកាត់: **{cost:.2f}$**\n"
                     f"ទឹកប្រាក់នៅសល់៖ **{remaining_balance:.2f}$**",
                parse_mode='Markdown'
            )

        try:
            notification_message = (
                f"✅ **ការបញ្ជាទិញបានជោគជ័យ!**\n\n"
                f"- សេវាកម្ម៖ **{order_details['service_name']}**\n"
                f"- Order ID: `{order_details['smm_order_id']}`\n"
                f"- Link៖ `{order_details['link']}`\n"
                f"- ទឹកប្រាក់របស់អ្នកត្រូវបានកាត់ចំនួន: **{order_details['cost']:.2f}$**\n"
                f"- ទឹកប្រាក់នៅសល់៖ **{remaining_balance:.2f}$**\n"
                f"- ថ្ងៃ ខែ ឆ្នាំ និង ម៉ោង: `{order_details['timestamp']}`"
            )

            await context.bot.send_message(
                chat_id=TELEGRAM_GROUP_ID,
                text=notification_message,
                parse_mode='Markdown'
            )
            logger.info(f"Sent order notification to group {TELEGRAM_GROUP_ID}.")

        except TelegramError as e:
            logger.error(f"CRITICAL: Failed to send notification to group {TELEGRAM_GROUP_ID}. Error: {e}")

            if ADMIN_USER_IDS:
                admin_id = ADMIN_USER_IDS[0]
                error_message_for_admin = (
                    f"⚠️ <b>បញ្ហាធ្ងន់ធ្ងរ</b> ⚠️\n\n"
                    f"Bot មិនអាចផ្ញើសារបញ្ជាក់ការបញ្ជាទិញទៅកាន់គ្រុប ID <code>{TELEGRAM_GROUP_ID}</code> បានទេ។\n\n"
                    f"<b>Error Message ពី Telegram:</b>\n<code>{e}</code>\n\n"
                    f"<b>សូមពិនិត្យមើលជាបន្ទាន់៖</b>\n"
                    f"1. តើ Group ID <code>{TELEGRAM_GROUP_ID}</code> ត្រឹមត្រូវ 100% ឬទេ?\n"
                    f"2. តើ Bot ត្រូវបាន Add ជា <b>Admin</b> នៅក្នុងគ្រុបនោះហើយឬនៅ?"
                )
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=error_message_for_admin,
                        parse_mode='HTML'
                    )
                except Exception as admin_send_error:
                    logger.error(f"FATAL: Could not even send the error report to main admin {admin_id}. Error: {admin_send_error}")

    else:
        user_accounts[user_id]["balance"] += cost # Refund the money
        error_msg = smm_response.get("error", "Unknown error from SMM Panel")
        logger.error(f"SMM Order failed. Refunding {cost}$. Error: {error_msg}")

        try:
            await query.edit_message_text(
                f"❌ **ការបញ្ជាទិញបានបរាជ័យ!**\n\n"
                f"បញ្ហាពី SMM Panel: `{error_msg}`\n\n"
                f"**ទឹកប្រាក់របស់អ្នកត្រូវបានសងត្រលប់មកវិញ។**",
                parse_mode='Markdown'
            )
        except BadRequest:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"❌ **ការបញ្ជាទិញបានបរាជ័យ!**\n\n"
                     f"បញ្ហាពី SMM Panel: `{error_msg}`\n\n"
                     f"**ទឹកប្រាក់របស់អ្នកត្រូវបានសងត្រលប់មកវិញ។**",
                parse_mode='Markdown'
            )

    context.user_data.clear()
    return ConversationHandler.END


async def cancel_order_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("❌ ការបញ្ជាទិញត្រូវបានបោះបង់។", reply_markup=await get_main_menu_keyboard(), parse_mode='Markdown')
    context.user_data.clear()
    return ConversationHandler.END


# Helper function to send or edit message from a callback query
async def send_or_edit_message_from_query(query: Update.callback_query, text: str, reply_markup=None, parse_mode='Markdown'):
    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except BadRequest:
        await query.bot.send_message(chat_id=query.message.chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)

# --- Admin Panel Functions (Entry Points for Conversations) ---

async def admin_add_platform_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS:
        await send_or_edit_message_from_query(query, "⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។")
        return ConversationHandler.END
    await send_or_edit_message_from_query(query, "សូមវាយបញ្ចូលឈ្មោះ Platform ថ្មីដែលអ្នកចង់បន្ថែម៖ (ឧទាហរណ៍៖ `Twitter`)\n\nវាយ /cancel ដើម្បីបោះបង់។")
    return ADD_PLATFORM_NAME

async def admin_add_service_new_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS:
        await send_or_edit_message_from_query(query, "⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។")
        return ConversationHandler.END

    if not services_data:
        await send_or_edit_message_from_query(query, "❌ មិនទាន់មាន Platform ណាមួយត្រូវបានបន្ថែមនៅឡើយទេ។\n\nសូមប្រើប៊ូតុង 'បន្ថែម Platform ថ្មី' ជាមុនសិន។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។")
        return ConversationHandler.END

    platform_keyboard = [[InlineKeyboardButton(f"**{platform}**", callback_data=f'add_service_platform_{platform}')] for platform in services_data.keys()]
    platform_keyboard.append([InlineKeyboardButton("⬅️ **ត្រឡប់**", callback_data='admin_back_to_panel')]) # Back to admin panel
    await send_or_edit_message_from_query(query, "សូមជ្រើសរើស Platform ដែលអ្នកចង់បន្ថែមសេវាកម្ម៖", reply_markup=InlineKeyboardMarkup(platform_keyboard))
    return ADD_SERVICE_PLATFORM

async def admin_delete_all_services_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS:
        await send_or_edit_message_from_query(query, "⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើមុខងារនេះទេ។")
        return ConversationHandler.END

    if not services_data:
        await send_or_edit_message_from_query(query, "❌ មិនទាន់មានសេវាកម្មណាមួយត្រូវបានបន្ថែមនៅឡើយទេ។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("✅ **បញ្ជាក់ (បាទ)**", callback_data='confirm_delete_all_yes')],
        [InlineKeyboardButton("❌ **បោះបង់ (ទេ)**", callback_data='confirm_delete_all_no')]
    ]
    await send_or_edit_message_from_query(
        query,
        "⚠️ **អ្នកប្រាកដជាចង់លុបសេវាកម្មទាំងអស់មែនទេ?**\n**ប្រតិបត្តិការនេះមិនអាចដកថយបានទេ!**",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM_DELETE_ALL_SERVICES

async def admin_rename_platform_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS:
        await send_or_edit_message_from_query(query, "⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។")
        return ConversationHandler.END
    
    if not services_data:
        await send_or_edit_message_from_query(query, "❌ មិនទាន់មាន Platform ណាមួយត្រូវបានបន្ថែមនៅឡើយទេ។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។")
        return ConversationHandler.END

    await send_or_edit_message_from_query(query, "សូមវាយបញ្ចូលឈ្មោះ Platform ចាស់ដែលអ្នកចង់កែប្រែ៖ (ឧទាហរណ៍៖ `Facebook`)\n\nវាយ /cancel ដើម្បីបោះបង់។")
    return RENAME_PLATFORM_OLD_NAME

async def admin_delete_platform_select_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS:
        await send_or_edit_message_from_query(query, "⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។")
        return ConversationHandler.END

    if not services_data:
        await send_or_edit_message_from_query(query, "❌ មិនទាន់មាន Platform ណាមួយត្រូវបានបន្ថែមនៅឡើយទេ។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។")
        return ConversationHandler.END

    platform_buttons = []
    for platform_name in services_data.keys():
        platform_buttons.append([InlineKeyboardButton(platform_name, callback_data=f'delete_platform_confirm_{platform_name}')])
    
    platform_buttons.append([InlineKeyboardButton("⬅️ **ត្រឡប់**", callback_data='admin_manage_platforms')]) 

    reply_markup = InlineKeyboardMarkup(platform_buttons)
    await send_or_edit_message_from_query(query, "⚠️ សូមជ្រើសរើស Platform ដែលអ្នកចង់លុប៖\n\n**ការលុប Platform នឹងលុបសេវាកម្មទាំងអស់ដែលជាប់ជាមួយផងដែរ!**", reply_markup=reply_markup)
    return DELETE_PLATFORM_NAME


# Admin Panel Main Handlers
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        if update.message:
            await update.message.reply_text("⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.answer("⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", show_alert=True)
            try:
                await update.callback_query.message.edit_text("⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", parse_mode='Markdown')
            except BadRequest: 
                await context.bot.send_message(chat_id=update.effective_chat.id, text="⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", parse_mode='Markdown')
        return ConversationHandler.END 

    keyboard = [
        [InlineKeyboardButton("📊 **មើលទិន្នន័យសេវាកម្ម**", callback_data='admin_view_services')],
        [InlineKeyboardButton("➕ **គ្រប់គ្រង Platforms**", callback_data='admin_manage_platforms')], 
        [InlineKeyboardButton("➕ **បន្ថែមសេវាកម្មថ្មី**", callback_data='admin_add_service_new')], 
        [InlineKeyboardButton("💰 **គ្រប់គ្រងទឹកប្រាក់អ្នកប្រើប្រាស់**", callback_data='admin_manage_balance_main')],
        [InlineKeyboardButton("📢 **ផ្ញើសារទៅអ្នកប្រើប្រាស់**", callback_data='admin_broadcast')],
        [InlineKeyboardButton("📡 **SMM Panel Tools**", callback_data='admin_smm_tools')],
        [InlineKeyboardButton("⬅️ **ចេញពី Admin Panel**", callback_data='start_menu')] 
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "👋 សូមស្វាគមន៍មកកាន់ Admin Panel!", reply_markup=reply_markup, parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.answer() 
        try:
            await update.callback_query.message.edit_text(
                "👋 សូមស្វាគមន៍មកកាន់ Admin Panel!", reply_markup=reply_markup, parse_mode='Markdown'
            )
        except BadRequest: 
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="👋 សូមស្វាគមន៍មកកាន់ Admin Panel!", reply_markup=reply_markup, parse_mode='Markdown'
            )

    context.user_data.clear()
    return ConversationHandler.END


# --- Admin Platform/Service Management Handlers (These are menus, not conversation entry points themselves) ---
async def admin_manage_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await query.edit_message_text("⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", parse_mode='Markdown')
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("➕ **បន្ថែម Platform ថ្មី**", callback_data='admin_add_platform')],
        [InlineKeyboardButton("✍️ **កែប្រែឈ្មោះ Platform**", callback_data='admin_rename_platform')], 
        [InlineKeyboardButton("🗑️ **លុប Platform ចេញ**", callback_data='admin_delete_platform_select')],
        # Service-specific management options now under "គ្រប់គ្រង Platforms"
        [InlineKeyboardButton("📝 **កែប្រែសេវាកម្ម**", callback_data='admin_edit_service_info')], 
        [InlineKeyboardButton("🗑️ **លុបសេវាកម្មតែមួយ**", callback_data='admin_delete_single_service')], 
        [InlineKeyboardButton("🔥 **លុបសេវាកម្មទាំងអស់**", callback_data='admin_delete_all_services')], 
        [InlineKeyboardButton("⬅️ **ត្រឡប់ទៅ Admin Panel**", callback_data='admin_back_to_panel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("⚙️ សូមជ្រើសរើសជម្រើសគ្រប់គ្រង Platform និងសេវាកម្ម៖", reply_markup=reply_markup, parse_mode='Markdown')
    return ConversationHandler.END 


async def admin_delete_platform_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    platform_to_delete = query.data.replace('delete_platform_confirm_', '')

    context.user_data['platform_to_delete'] = platform_to_delete

    keyboard = [
        [InlineKeyboardButton(f"✅ **បញ្ជាក់លុប {platform_to_delete}**", callback_data=f'confirm_delete_platform_yes_{platform_to_delete}')],
        [InlineKeyboardButton("❌ **បោះបង់**", callback_data='confirm_delete_platform_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"⚠️ **អ្នកពិតជាចង់លុប Platform '{platform_to_delete}' និងសេវាកម្មទាំងអស់របស់វាមែនទេ?**\n\n"
        f"**ប្រតិបត្តិការនេះមិនអាចដកថយបានទេ!**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return CONFIRM_DELETE_PLATFORM 


async def admin_delete_platform_execute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    platform_to_delete = context.user_data.get('platform_to_delete')

    if query.data.startswith('confirm_delete_platform_yes_'):
        if platform_to_delete in services_data:
            del services_data[platform_to_delete]
            await query.edit_message_text(f"🗑️ **បានលុប Platform '{platform_to_delete}' និងសេវាកម្មទាំងអស់របស់វាដោយជោគជ័យ។**\n\n/admin", parse_mode='Markdown')
        else:
            await query.edit_message_text(f"❌ Platform '{platform_to_delete}' មិនមានទេ។ ប្រហែលជាត្រូវបានលុបរួចហើយ។\n\n/admin", parse_mode='Markdown')
    else: # confirm_delete_platform_no
        await query.edit_message_text(f"❌ ការលុប Platform '{platform_to_delete}' ត្រូវបានបោះបង់។\n\n/admin", parse_mode='Markdown')
    
    context.user_data.clear()
    return ConversationHandler.END


async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles general admin button clicks that do NOT start a multi-step conversation.
    For buttons that start conversations, separate entry point functions are used.
    """
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        try:
            await query.edit_message_text("⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។", parse_mode='Markdown')
        return ConversationHandler.END

    # Consolidate message sending/editing logic to reduce repetition
    async def send_or_edit_message(text, reply_markup=None, parse_mode='Markdown'):
        try:
            await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)

    if query.data == 'admin_view_services':
        message_text = "📊 ទិន្នន័យសេវាកម្មបច្ចុចុបន្ន:\n\n"
        if not services_data: message_text += "    _(មិនទាន់មាន Platform ឬសេវាកម្ម)_\n"
        else:
            for platform, services in services_data.items():
                message_text += f"**{platform}**:\n"
                if services:
                    for service in services:
                        smm_id_info = f" (SMM ID: `{service['smm_service_id']}`)" if "smm_service_id" in service else ""
                        message_text += f"    ▪️ `{service['id']}`: {service['name']} ({service['price_per_k']}$/1K){smm_id_info}\n"
                else: message_text += "    _(មិនទាន់មានសេវាកម្ម)_\n"
        message_text += "\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។"
        await send_or_edit_message(message_text, parse_mode='Markdown')
        # Return ConversationHandler.END if this is a final display, otherwise return next state
        return ConversationHandler.END

    elif query.data == 'admin_manage_platforms': 
        await admin_manage_platforms(update, context)
        return ConversationHandler.END 

    elif query.data == 'admin_manage_balance_main': 
        keyboard = [
            [InlineKeyboardButton("➕ **1. ដាក់ប្រាក់តាម ID**", callback_data='admin_deposit_by_id')],
            [InlineKeyboardButton("➖ **2. កាត់បន្ថយប្រាក់តាម ID (Command)**", callback_data='admin_deduct_by_id')],
            [InlineKeyboardButton("⬅️ **ត្រឡប់**", callback_data='admin_back_to_panel')]
        ]
        await send_or_edit_message("សូមជ្រើសរើសជម្រើសគ្រប់គ្រងទឹកប្រាក់៖", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        # This is a menu, so it ends the current flow but doesn't necessarily start a new conversation state itself.
        # It just presents new inline buttons.

    elif query.data == 'admin_smm_tools':
        keyboard = [
            [InlineKeyboardButton("💲 **ឆែកទឹកប្រាក់ SMM Panel**", callback_data='admin_check_smm_balance')],
            [InlineKeyboardButton("⬅️ **ត្រឡប់**", callback_data='admin_back_to_panel')]
        ]
        await send_or_edit_message("សូមជ្រើសរើស SMM Panel Tools៖", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        # This is a menu.

    elif query.data == 'admin_check_smm_balance':
        await check_smm_balance_cmd(update, context) # This function will send its own message.
        return ConversationHandler.END 

    elif query.data == 'admin_deposit_by_id': 
        # This is now handled by admin_deposit_by_id_entry as a direct entry point to a conversation.
        # If it somehow gets here, it's a fallback.
        await send_or_edit_message("សូមវាយបញ្ចូល **User ID** ដែលអ្នកចង់ដាក់ប្រាក់៖\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
        return ASK_USER_ID_FOR_DEPOSIT # Still needs to return a state if handled here.

    elif query.data == 'admin_deduct_by_id': 
        await send_or_edit_message(text="⚠️ សម្រាប់កាត់បន្ថយទឹកប្រាក់ សូមប្រើពាក្យបញ្ជា:\n`/deductbalance <UserID> <Amount>`\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')
        return ConversationHandler.END

    elif query.data == 'admin_edit_service_info': 
        await send_or_edit_message(text="⚠️ សម្រាប់កែប្រែសេវាកម្ម សូមប្រើពាក្យបញ្ជា:\n`/editservice <Platform> <Service ID> <New Service Name> <New Price Per 1K> <New SMM Service ID>`\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')
        return ConversationHandler.END

    elif query.data == 'admin_delete_single_service': 
        await send_or_edit_message(text="⚠️ សម្រាប់លុបសេវាកម្មតែមួយ សូមប្រើពាក្យបញ្ជា:\n`/deleteservice <Platform> <Service ID>`\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')
        return ConversationHandler.END

    elif query.data == 'admin_broadcast':
        await send_or_edit_message(text="📢 មុខងារផ្ញើសារទៅអ្នកប្រើប្រាស់ទាំងអស់:\n\nសូមប្រើពាក្យបញ្ជា:\n`/broadcast <Your Message>`\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')
        return ConversationHandler.END

    elif query.data == 'admin_back_to_panel':
        await admin_panel(update, context) 
        return ConversationHandler.END

    elif query.data == 'start_menu': 
        await start(update, context)
        return ConversationHandler.END

    # If an unexpected callback data is received by this general handler, log it.
    logger.warning(f"Admin button handler received unhandled callback_data: {query.data}")
    return ConversationHandler.END


async def received_platform_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_platform_name = update.message.text.strip()
    if len(new_platform_name.split(' ', 1)) > 1 and new_platform_name.split(' ', 1)[0] in ["⚫️", "🔴", "🔵", "🟣", "🟢", "🟡"]:
        new_platform_name_clean = new_platform_name.split(' ', 1)[1]
    else:
        new_platform_name_clean = new_platform_name

    if new_platform_name_clean.lower() in [key.lower() for key in services_data.keys()]:
        await update.message.reply_text(f"Platform '**{new_platform_name_clean}**' មានរួចហើយ។ សូមសាកល្បងឈ្មោះផ្សេងទៀត ឬវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
        return ADD_PLATFORM_NAME

    services_data[new_platform_name_clean] = []
    await update.message.reply_text(f"✅ បានបន្ថែម Platform '**{new_platform_name_clean}**' ដោយជោគជ័យ។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')
    context.user_data.clear()
    return ConversationHandler.END

async def select_service_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    platform_name_raw = query.data.replace('add_service_platform_', '')
    platform_name = platform_name_raw.split(' ')[-1] if ' ' in platform_name_raw else platform_name_raw

    context.user_data['current_platform'] = platform_name
    try:
        await query.edit_message_text(f"អ្នកបានជ្រើសរើស Platform **{platform_name}** ។\n\nឥឡូវសូមវាយបញ្ចូលឈ្មោះសេវាកម្មថ្មី៖ (ឧទាហរណ៍៖ `Facebook Likes`)\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
    except BadRequest:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"អ្នកបានជ្រើសរើស Platform **{platform_name}** ។\n\nឥឡូវសូមវាយបញ្ចូលឈ្មោះសេវាកម្មថ្មី៖ (ឧទាហរណ៍៖ `Facebook Likes`)\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
    return ADD_SERVICE_NAME

async def received_service_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service_name = update.message.text.strip()
    platform_name = context.user_data.get('current_platform')

    if not platform_name:
        await update.message.reply_text("មានបញ្ហា។ សូមចាប់ផ្តើមឡើងវិញពី /admin ។", parse_mode='Markdown')
        context.user_data.clear()
        return ConversationHandler.END

    base_service_id = "".join(filter(str.isalnum, service_name.lower().replace(' ', '_')))
    service_id = base_service_id
    counter = 1
    existing_ids = {s['id'] for s in services_data.get(platform_name, [])}
    while service_id in existing_ids:
        service_id = f"{base_service_id}_{counter}"
        counter += 1

    if any(s['name'].lower() == service_name.lower() for s in services_data.get(platform_name, [])):
        await update.message.reply_text(f"សេវាកម្ម '**{service_name}**' មានរួចហើយ។ សូមវាយឈ្មោះផ្សេង ឬ /cancel ។", parse_mode='Markdown')
        return ADD_SERVICE_NAME

    context.user_data['new_service_id'] = service_id
    context.user_data['new_service_name'] = service_name
    await update.message.reply_text("ឥឡូវសូមវាយបញ្ចូលតម្លៃសម្រាប់សេវាកម្មនេះ (តម្លៃគិតជា $ ក្នុង 1000)： (ឧ. `5.0`)\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
    return ADD_SERVICE_PRICE

async def received_service_price_and_ask_smm_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        service_price_per_k = float(update.message.text.strip())
        if service_price_per_k < 0: raise ValueError("Price cannot be negative.")
    except ValueError:
        await update.message.reply_text("តម្លៃមិនត្រឹមត្រូវទេ។ សូមវាយបញ្ចូលជាលេខ (ឧ. `5.0`) ឬ /cancel ។", parse_mode='Markdown')
        return ADD_SERVICE_PRICE

    context.user_data['new_service_price_per_k'] = service_price_per_k
    await update.message.reply_text("ឥឡូវសូមវាយបញ្ចូល **SMM Service ID** សម្រាប់សេវាកម្មនេះ៖ (ឧ. `12345`)\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
    return ADD_SMM_SERVICE_ID

async def received_smm_service_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        smm_service_id = int(update.message.text.strip())
        if smm_service_id <= 0: raise ValueError("SMM Service ID must be a positive integer.")
    except ValueError:
        await update.message.reply_text("SMM Service ID មិនត្រឹមត្រូវទេ។ សូមវាយបញ្ចូលជាលេខ (ឧ. `12345`) ឬ /cancel។", parse_mode='Markdown')
        return ADD_SMM_SERVICE_ID

    platform_name = context.user_data.get('current_platform')
    new_service_name = context.user_data.get('new_service_name')
    new_service_id = context.user_data.get('new_service_id')
    service_price_per_k = context.user_data.get('new_service_price_per_k')

    if not all([platform_name, new_service_name, new_service_id, service_price_per_k is not None]):
        await update.message.reply_text("មានបញ្ហា។ សូមចាប់ផ្តើមឡើងវិញពី /admin ។", parse_mode='Markdown')
        context.user_data.clear()
        return ConversationHandler.END

    services_data[platform_name].append({
        "id": new_service_id,
        "name": new_service_name,
        "price_per_k": service_price_per_k,
        "smm_service_id": smm_service_id
    })
    await update.message.reply_text(f"✅ បានបន្ថែមសេវាកម្ម **'{new_service_name}'** ទៅកាន់ **{platform_name}** ដោយជោគជ័យ។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')

    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancels and ends the current conversation, returning to the main menu."""
    reply_text = "❌ បានបោះបង់ប្រតិបត្តិការ។"
    chat_id_to_send = update.effective_chat.id

    if update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.message.edit_text(text=reply_text, parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=chat_id_to_send, text=reply_text, parse_mode='Markdown')
    elif update.message:
        await update.message.reply_text(text=reply_text, parse_mode='Markdown')

    await context.bot.send_message(
        chat_id=chat_id_to_send,
        text="សូមជ្រើសរើសជម្រើសខាងក្រោម៖",
        reply_markup=await get_main_menu_keyboard(),
        parse_mode='Markdown'
    )
    context.user_data.clear()
    return ConversationHandler.END

async def confirm_delete_all_services_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS:
        try:
            await query.edit_message_text("⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើមុខងារនេះទេ។", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើមុខងារនេះទេ។", parse_mode='Markdown')
        return ConversationHandler.END

    if query.data == 'confirm_delete_all_yes':
        global services_data
        for platform in services_data:
            services_data[platform] = []
        try:
            await query.edit_message_text("🗑️ **បានលុបសេវាកម្មទាំងអស់ចេញពីប្រព័ន្ធហើយ!**\n\n/admin", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="🗑️ **បានលុបសេវាកម្មទាំងអស់ចេញពីប្រព័ន្ធហើយ!**\n\n/admin", parse_mode='Markdown')
    else:
        try:
            await query.edit_message_text("❌ ការលុបសេវាកម្មទាំងអស់ត្រូវបានបោះបង់។\n\n/admin", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="❌ ការលុបសេវាកម្មទាំងអស់ត្រូវបានបោះបង់។\n\n/admin", parse_mode='Markdown')
    context.user_data.clear()
    return ConversationHandler.END

async def received_old_platform_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    old_name = update.message.text.strip()
    if old_name not in services_data:
        await update.message.reply_text(f"Platform '**{old_name}**' មិនមានទេ។ សូមវាយឈ្មោះម្តងទៀត ឬ /cancel ។", parse_mode='Markdown')
        return RENAME_PLATFORM_OLD_NAME
    context.user_data['old_platform_name'] = old_name
    await update.message.reply_text(f"អ្នកបានជ្រើសរើស **{old_name}** ។\n\nឥឡូវសូមវាយបញ្ចូលឈ្មោះថ្មី៖", parse_mode='Markdown')
    return RENAME_PLATFORM_NEW_NAME

async def finalize_rename_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    old_name = context.user_data.get('old_platform_name')
    if not old_name:
        await update.message.reply_text("មានបញ្ហា។ សូមចាប់ផ្តើមឡើងវិញពី /admin ។", parse_mode='Markdown')
        context.user_data.clear()
        return ConversationHandler.END
    if new_name.lower() in [key.lower() for key in services_data.keys()]:
        await update.message.reply_text(f"ឈ្មោះ Platform '**{new_name}**' មានរួចហើយ។ សូមវាយឈ្មោះផ្សេង ឬ /cancel ។", parse_mode='Markdown')
        return RENAME_PLATFORM_NEW_NAME
    
    new_name_clean = new_name.split(' ')[-1] if ' ' in new_name else new_name
    
    services_data[new_name_clean] = services_data.pop(old_name)
    await update.message.reply_text(f"✅ បានកែប្រែឈ្មោះ Platform ពី **'{old_name}'** ទៅ **'{new_name_clean}'** ដោយជោគជ័យ។\n\n/admin ដើម្បីត្រឡប់ទៅ Admin Panel វិញ។", parse_mode='Markdown')
    context.user_data.clear()
    return ConversationHandler.END

async def admin_deposit_by_id_entry(update: Update, context: ContextTypes.DEFAULT_TYPE): # Renamed to _entry
    query = update.callback_query
    await query.answer()
    if update.effective_user.id not in ADMIN_USER_IDS: # Added admin check
        await send_or_edit_message_from_query(query, "⛔️ អ្នកមិនមានសិទ្ធិចូលប្រើ Admin Panel ទេ។")
        return ConversationHandler.END
    
    try:
        await query.edit_message_text("សូមវាយបញ្ចូល **User ID** ដែលអ្នកចង់ដាក់ប្រាក់៖\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
    except BadRequest:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="សូមវាយបញ្ចូល **User ID** ដែលអ្នកចង់ដាក់ប្រាក់៖\n\nវាយ /cancel ដើម្បីបោះបង់។", parse_mode='Markdown')
    return ASK_USER_ID_FOR_DEPOSIT

async def receive_user_id_for_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    try:
        target_user_id = int(update.message.text.strip())
        context.user_data['target_user_id'] = target_user_id
        await update.message.reply_text(f"User ID: `{target_user_id}` ។\n\nឥឡូវសូមវាយបញ្ចូល **ចំនួនទឹកប្រាក់**៖ (ឧ. `10.50`)\n\nវាយ /cancel ។", parse_mode='Markdown')
    except ValueError:
        await update.message.reply_text("User ID មិនត្រឹមត្រូវ។ សូមវាយបញ្ចូលជាលេខ ឬ /cancel ។", parse_mode='Markdown')
        return ASK_USER_ID_FOR_DEPOSIT
    return ASK_AMOUNT_FOR_DEPOSIT

async def receive_amount_for_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    try:
        amount = float(update.message.text.strip())
        if amount <= 0: raise ValueError("Amount must be positive.")
    except ValueError:
        await update.message.reply_text("ចំនួនទឹកប្រាក់មិនត្រឹមត្រូវ។ សូមវាយបញ្ចូលជាលេខ (ឧ. `10.50`) ឬ /cancel ។", parse_mode='Markdown')
        return ASK_AMOUNT_FOR_DEPOSIT
    target_user_id = context.user_data.get('target_user_id')
    if target_user_id is None:
        await update.message.reply_text("មានបញ្ហា។ សូមចាប់ផ្តើមឡើងវិញ។", parse_mode='Markdown')
        context.user_data.clear()
        return ConversationHandler.END
    if target_user_id not in user_accounts:
        user_accounts[target_user_id] = {"balance": 0, "transactions": [], "orders": []}
    user_accounts[target_user_id]["balance"] += amount
    user_accounts[target_user_id]["transactions"].append(f"+{amount:.2f}$ (Admin add) on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    await update.message.reply_text(f"✅ បានដាក់ប្រាក់ **{amount:.2f}$** ទៅកាន់ User ID: **{target_user_id}**។ ទឹកប្រាក់សរុប: **{user_accounts[target_user_id]['balance']:.2f}$**\n\n/admin", parse_mode='Markdown')
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"🎉 ទឹកប្រាក់ **{amount:.2f}$** ត្រូវបានបន្ថែមទៅគណនីរបស់អ្នក។ ទឹកប្រាក់សរុប: **{user_accounts[target_user_id]['balance']:.2f}$**", parse_mode='Markdown')
    except TelegramError as e: 
        logger.warning(f"Failed to notify user {target_user_id} about balance addition: {e}")
    context.user_data.clear()
    return ConversationHandler.END

async def check_smm_balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        if update.callback_query: 
            await update.callback_query.answer("⛔️ អ្នកមិនមានសិទ្ធិ។", show_alert=True)
            try:
                await update.callback_query.message.edit_text("⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
            except BadRequest:
                await context.bot.send_message(chat_id=update.effective_chat.id, text="⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
        else: 
            await update.message.reply_text("⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
        return ConversationHandler.END 
    
    target_message = update.callback_query.message if update.callback_query else update.message
    try:
        await target_message.edit_text("💲 កំពុងឆែកទឹកប្រាក់ SMM Panel...", parse_mode='Markdown')
    except BadRequest:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="💲 កំពុងឆែកទឹកប្រាក់ SMM Panel...", parse_mode='Markdown')

    response = await smm_client.get_balance()
    if response.get("success"):
        try:
            await target_message.edit_text(f"✅ ទឹកប្រាក់ក្នុង SMM Panel៖ **{response['balance']:.2f} {response.get('currency', 'USD')}**\n\n/admin", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"✅ ទឹកប្រាក់ក្នុង SMM Panel៖ **{response['balance']:.2f} {response.get('currency', 'USD')}**\n\n/admin", parse_mode='Markdown')
    else:
        try:
            await target_message.edit_text(f"❌ មិនអាចឆែកទឹកប្រាក់បានទេ។ បញ្ហា: `{response.get('error', 'Unknown')}`\n\n/admin", parse_mode='Markdown')
        except BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"❌ មិនអាចឆែកទឹកប្រាក់បានទេ។ បញ្ហា: `{response.get('error', 'Unknown')}`\n\n/admin", parse_mode='Markdown')
    return ConversationHandler.END

async def deduct_balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
        return

    if len(context.args) != 2:
        await update.message.reply_text("⚠️ របៀបប្រើប្រាស់ត្រឹមត្រូវ: `/deductbalance <UserID> <Amount>`", parse_mode='Markdown')
        return

    try:
        target_user_id = int(context.args[0])
        amount = float(context.args[1])
        if amount <= 0:
            raise ValueError("Amount must be positive.")
    except (ValueError, TypeError):
        await update.message.reply_text("❌ User ID ឬចំនួនទឹកប្រាក់មិនត្រឹមត្រូវ។ សូមបញ្ចូលលេខត្រឹមត្រូវ។", parse_mode='Markdown')
        return

    if target_user_id not in user_accounts or user_accounts[target_user_id]["balance"] < amount:
        await update.message.reply_text(f"❌ User ID `{target_user_id}` មិនមាន ឬទឹកប្រាក់មិនគ្រប់គ្រាន់។ ទឹកប្រាក់បច្ចុប្បន្ន: `{user_accounts.get(target_user_id, {}).get('balance', 0):.2f}$`", parse_mode='Markdown')
        return

    user_accounts[target_user_id]["balance"] -= amount
    user_accounts[target_user_id]["transactions"].append(f"-{amount:.2f}$ (Admin deduct) on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    new_balance = user_accounts[target_user_id]['balance']

    await update.message.reply_text(f"✅ បានកាត់បន្ថយទឹកប្រាក់ **{amount:.2f}$** ពី User ID: **{target_user_id}**។ ទឹកប្រាក់សរុប: **{new_balance:.2f}$**", parse_mode='Markdown')
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"⚠️ ទឹកប្រាក់ **{amount:.2f}$** ត្រូវបានកាត់ចេញពីគណនីរបស់អ្នកដោយអ្នកគ្រប់គ្រង។ ទឹកប្រាក់សរុប: **{new_balance:.2f}$**", parse_mode='Markdown')
    except TelegramError as e:
        logger.warning(f"Failed to notify user {target_user_id} about balance deduction: {e}")

async def edit_service_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
        return

    if len(context.args) != 5:
        await update.message.reply_text("⚠️ របៀបប្រើប្រាស់ត្រឹមត្រូវ: `/editservice <Platform> <Service ID> <New Service Name> <New Price Per 1K> <New SMM Service ID>`", parse_mode='Markdown')
        return

    platform_name = context.args[0]
    service_id_to_edit = context.args[1]
    new_service_name = context.args[2]
    
    try:
        new_price_per_k = float(context.args[3])
        new_smm_service_id = int(context.args[4])
        if new_price_per_k < 0 or new_smm_service_id <= 0:
            raise ValueError("Price and SMM Service ID must be positive.")
    except (ValueError, TypeError):
        await update.message.reply_text("❌ តម្លៃ ឬ SMM Service ID មិនត្រឹមត្រូវ។ សូមបញ្ចូលលេខត្រឹមត្រូវ។", parse_mode='Markdown')
        return

    if platform_name not in services_data:
        await update.message.reply_text(f"❌ Platform '**{platform_name}**' មិនមានទេ។", parse_mode='Markdown')
        return

    service_found = False
    for service in services_data[platform_name]:
        if service['id'] == service_id_to_edit:
            service['name'] = new_service_name
            service['price_per_k'] = new_price_per_k
            service['smm_service_id'] = new_smm_service_id
            service_found = True
            break
    
    if service_found:
        await update.message.reply_text(f"✅ បានកែប្រែសេវាកម្ម `{service_id_to_edit}` ក្នុង Platform **{platform_name}** ដោយជោគជ័យ។", parse_mode='Markdown')
    else:
        await update.message.reply_text(f"❌ មិនអាចរកឃើញសេវាកម្ម `{service_id_to_edit}` ក្នុង Platform **{platform_name}** ទេ។", parse_mode='Markdown')

async def delete_single_service_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
        return

    if len(context.args) != 2:
        await update.message.reply_text("⚠️ របៀបប្រើប្រាស់ត្រឹមត្រូវ: `/deleteservice <Platform> <Service ID>`", parse_mode='Markdown')
        return

    platform_name = context.args[0]
    service_id_to_delete = context.args[1]

    if platform_name not in services_data:
        await update.message.reply_text(f"❌ Platform '**{platform_name}**' មិនមានទេ។", parse_mode='Markdown')
        return

    initial_service_count = len(services_data[platform_name])
    services_data[platform_name] = [s for s in services_data[platform_name] if s['id'] != service_id_to_delete]
    
    if len(services_data[platform_name]) < initial_service_count:
        await update.message.reply_text(f"✅ បានលុបសេវាកម្ម `{service_id_to_delete}` ចេញពី Platform **{platform_name}** ដោយជោគជ័យ។", parse_mode='Markdown')
    else:
        await update.message.reply_text(f"❌ មិនអាចរកឃើញសេវាកម្ម `{service_id_to_delete}` ក្នុង Platform **{platform_name}** ទេ។", parse_mode='Markdown')

async def broadcast_message_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("⛔️ អ្នកមិនមានសិទ្ធិ។", parse_mode='Markdown')
        return

    if not context.args:
        await update.message.reply_text("⚠️ របៀបប្រើប្រាស់ត្រឹមត្រូវ: `/broadcast <Your Message>`", parse_mode='Markdown')
        return

    message_to_send = " ".join(context.args)
    sent_count = 0
    failed_count = 0

    await update.message.reply_text("📢 កំពុងផ្ញើសារ Broadcast... សូមរង់ចាំ។", parse_mode='Markdown')

    for uid in user_accounts.keys():
        if uid == user_id: 
            continue
        try:
            await context.bot.send_message(chat_id=uid, text=f"🔔 **សារពីអ្នកគ្រប់គ្រង:**\n\n{message_to_send}", parse_mode='Markdown')
            sent_count += 1
        except TelegramError as e:
            logger.warning(f"Failed to send broadcast to user {uid}. Error: {e}")
            failed_count += 1
    
    await update.message.reply_text(f"✅ បានផ្ញើសារ Broadcast រួចរាល់។\n"
                                     f"👉 **បានផ្ញើទៅ:** {sent_count} នាក់\n"
                                     f"👉 **បរាជ័យ:** {failed_count} នាក់", parse_mode='Markdown')


def main():
    """ចាប់ផ្តើម Bot ។"""
    application = Application.builder().token("8086248274:AAFT1YgdZT3Dvl3IOwU_Ca0PWQvTnWzAaKQ").build()

    job_queue = application.job_queue
    application.bot_data['pending_deposits'] = {}  

    # --- Handlers ---

    # 1. Conversation Handler សម្រាប់ការដាក់ប្រាក់
    deposit_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text([BTN_DEPOSIT]), start_deposit)],
        states={
            DEPOSIT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_deposit_amount)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler("start", start)], 
        per_user=True,
        per_chat=True,
        allow_reentry=True
    )
    application.add_handler(deposit_conv_handler)

    # 2. Conversation Handler សម្រាប់ការបញ្ជាទិញ
    user_order_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_service_to_buy, pattern='^buy_service_.*$')],
        states={
            RECEIVE_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_quantity_then_ask_link)],
            RECEIVE_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_link_and_confirm_order)],
            CONFIRM_ORDER_AND_PAY: [CallbackQueryHandler(process_and_deduct_balance, pattern='^(confirm_order|cancel_order)$')],
        },
        fallbacks=[CommandHandler("cancel", cancel_order_flow), CommandHandler("start", start)],
        allow_reentry=True
    )
    application.add_handler(user_order_conv_handler)

    # 3. Handler សម្រាប់ Command /start
    application.add_handler(CommandHandler("start", start))

    # 4. Handler សម្រាប់ប៊ូតុង Menu ຫຼាក់ & Platform Buttons (User-facing)
    all_reply_buttons = [
        BTN_ORDER, BTN_DEPOSIT, BTN_BALANCE, BTN_USER_ID, BTN_CONTACT, BTN_HISTORY,
        BTN_TIKTOK_PLATFORM, BTN_YOUTUBE_PLATFORM, BTN_FACEBOOK_PLATFORM, 
        BTN_TWITTER_PLATFORM, BTN_TELEGRAM_PLATFORM, BTN_INSTAGRAM_PLATFORM,
        BTN_HOW_TO_BUY, BTN_JOIN_CHANNEL, BTN_ADMIN_CHAT, BTN_BACK_TO_MAIN_MENU
    ]
    application.add_handler(MessageHandler(filters.Text(all_reply_buttons), main_menu_handler))
    
    # 5. Handler សម្រាប់ CallbackQuery ដែលនៅសល់ (សម្រាប់ user menu)
    application.add_handler(CallbackQueryHandler(button_handler, pattern='^(show_services_.*|start_menu|show_platform_menu_from_inline)$'))

    # 6. Handler សម្រាប់ Admin បញ្ជាក់ការដាក់ប្រាក់
    application.add_handler(CallbackQueryHandler(handle_deposit_confirmation, pattern='^deposit_(approve|reject)_.*$'))

    # --- Admin Handlers ---
    application.add_handler(CommandHandler("admin", admin_panel)) # Main admin command

    # CONVERSATION HANDLER FOR ADMIN SERVICE AND PLATFORM MANAGEMENT
    admin_manage_service_conv_handler = ConversationHandler(
        entry_points=[
            # Direct entry points for admin actions that start a conversation flow
            CallbackQueryHandler(admin_add_platform_entry, pattern='^admin_add_platform$'),
            CallbackQueryHandler(admin_add_service_new_entry, pattern='^admin_add_service_new$'),
            CallbackQueryHandler(admin_delete_all_services_entry, pattern='^admin_delete_all_services$'),
            CallbackQueryHandler(admin_rename_platform_entry, pattern='^admin_rename_platform$'),
            CallbackQueryHandler(admin_delete_platform_select_entry, pattern='^admin_delete_platform_select$'),
        ],
        states={
            ADD_PLATFORM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_platform_name)],
            ADD_SERVICE_PLATFORM: [CallbackQueryHandler(select_service_platform, pattern='^add_service_platform_.*$')],
            ADD_SERVICE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_service_name)],
            ADD_SERVICE_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_service_price_and_ask_smm_id)],
            ADD_SMM_SERVICE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_smm_service_id)],
            CONFIRM_DELETE_ALL_SERVICES: [CallbackQueryHandler(confirm_delete_all_services_action, pattern='^confirm_delete_all_.*$')],
            RENAME_PLATFORM_OLD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_old_platform_name)],
            RENAME_PLATFORM_NEW_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, finalize_rename_platform)],
            DELETE_PLATFORM_NAME: [CallbackQueryHandler(admin_delete_platform_confirm, pattern='^delete_platform_confirm_.*$')], 
            CONFIRM_DELETE_PLATFORM: [CallbackQueryHandler(admin_delete_platform_execute, pattern='^(confirm_delete_platform_yes_|confirm_delete_platform_no)$')], 
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("admin", admin_panel)], 
        per_user=True, 
        per_chat=True, 
        allow_reentry=True
    )
    application.add_handler(admin_manage_service_conv_handler)

    # CONVERSATION HANDLER FOR ADMIN DEPOSIT BY ID
    admin_deposit_conv_handler = ConversationHandler( 
        entry_points=[CallbackQueryHandler(admin_deposit_by_id_entry, pattern='^admin_deposit_by_id$')], # Direct entry
        states={
            ASK_USER_ID_FOR_DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_user_id_for_deposit)],
            ASK_AMOUNT_FOR_DEPOSIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_amount_for_deposit)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("admin", admin_panel)], 
        per_user=True, 
        per_chat=True, 
        allow_reentry=True
    )
    application.add_handler(admin_deposit_conv_handler)
    
    # GENERAL ADMIN BUTTON HANDLER (for buttons that don't start a conversation)
    # Exclude patterns that are now direct entry points to conversations
    application.add_handler(CallbackQueryHandler(admin_button_handler, 
                                                 pattern='^(admin_view_services|admin_manage_balance_main|admin_broadcast|admin_back_to_panel|admin_deduct_by_id|admin_smm_tools|admin_check_smm_balance|start_menu|admin_edit_service_info|admin_delete_single_service|admin_manage_platforms)$')) 
    
    # Add command handlers for admin features that require arguments
    application.add_handler(CommandHandler("deductbalance", deduct_balance_cmd))
    application.add_handler(CommandHandler("editservice", edit_service_cmd))
    application.add_handler(CommandHandler("deleteservice", delete_single_service_cmd))
    application.add_handler(CommandHandler("broadcast", broadcast_message_cmd))


    print("Bot កំពុងដំណើរការ...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
